DBD::PgAsync
------------

This is a fork of DBD::Pg (3.18.0) intended to fully support
asynchronous database operations. In addition to the existing DBD::Pg
async support, this needs

	1. Support for async connect via PQconnectStart/ PQconnectPoll.
        2. Support for async prepare PQsendPrepare.
        3. Removal of synchronous database operations embedded in
           dbdimp.c functions, eg, in pg_db_cancel.

1) is implemented using a special attribute to connect and a method
named pg_continue_connect which functions as interface to
PQconnectPoll. See manpage for more details.

2) is implemented as well. The code should transparently use
PQsendPrepare instead of PQprepare for async statements.

3) completed so far: pg_cancel no longer waits for the result of the
cancelled query. 

Bug reports etc specifically about this code should probably rather be
sent to me than to any other DBD::Pg address, especially including the
principal author of most of the code (<greg@turnstep.com>).

	-- Rainer Weikusat <rweikusat@talktalk.net>

async-autotrans: Make automatically started transactions when AutoCommit is off
                 work asynchronously.

Problem
-------
When not in AutoCommit mode, the driver automatically starts a
transaction when this hasn't been done already. This requires
executing either one or two SQL statements which is done via PQexec,
ie, synchronously. That's obviously not what should be done when the
query itself is supposed to run asynchronously.


State
-----
Both asynchronous queries started via ->do without parameters
(pg_quickexec) and started via a statment handle (dbd_st_execute) will
run the necessary preparatory command asynchronously as well if the
full protocol for running queries asychronously is followed (call
->pg_ready until it returns true and then, pg->result).

THe OLDQUERY_WAIT path of handle_old_async doesn't know anything about
these preparatory queries yet. Further, when handle_old_async is
invoked for a query started via pg_quickexec, it'll leak an imp_sth_t
structure and the memory used to store the command until the
preparatory statements have been executed (imp_sth->statement).
